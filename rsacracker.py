#!/usr/bin/python3

from Crypto.PublicKey import RSA

# for solving ed = 1 (mod z)
def inverse(e, z):
    a, b, u = 0, z, 1
    while e > 0:
        q = b // e # integer division
        e, a, b, u = b % x, u, x, a - q * u
    if b == 1: 
        return a % z
    print "must be coprime"

p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483
q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407
e = 65537
c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034

n = p * q
z = (p - 1)*(q - 1)
d = inverse(e, z)

key = RSA.construct((n, long(e), d, p, q))
decrypted = key.decrypt(c)
# decrypted = hex(decrypted)
# decrypted = decrypted.lstrip('0x')
# decrypted = decrypted[:-1]
# ascii_bytes = bytearray.fromhex(str(decrypted))
# print ascii_bytes